syntax = "proto3";

package dev.zacsweers.metro.compiler.proto;

option java_package = "dev.zacsweers.metro.compiler.proto";
option java_multiple_files = true;

message DependencyGraphProto {
  // Required boolean "isGraph"
  bool is_graph = 1;

  // Required map of ClassIds (as strings) of provider factory classes
  // If is_graph is true, this includes _all_ inherited classes' factories too
  repeated string provider_factory_classes = 2;

  // Set of provider field names (strings). Only present if is_graph is true
  repeated string provider_field_names = 3;

  // Set of binds callable IDs with details: classId, callable name, and isProperty
  repeated BindsCallableId binds_callable_ids = 4;

  // Set of accessor callable names (strings)
  repeated string accessor_callable_names = 5;

  // Set of included class IDs (strings). Only present if is_graph is true
  repeated string included_classes = 6;

  // Set of instance field names (strings). Only present if is_graph is true
  repeated string instance_field_names = 7;

  // Bit field to represent which accessor IDs are multibindings
  int32 multibinding_accessor_indices = 8;

  // Set of extended parent class IDs (strings). Only present if is_graph is true
  repeated string parent_graph_classes = 9;
}

message BindsCallableId {
  string class_id = 1;
  string callable_name = 2;
  bool is_property = 3;
}

message MemberInjectInfo {
  // Map of ClassId (string) to list of injectable member names
  map<string, InjectableMembers> injectable_members_by_class = 1;
}

message InjectableMembers {
  repeated InjectableMember members = 1;
}

message InjectableMember {
  // Member name
  string name = 1;
  bool is_property = 2;
  // For properties
  bool is_lateinit = 3;
}

message MetroMetadata {
  string version = 1;

  DependencyGraphProto dependency_graph = 2;

  MemberInjectInfo member_inject_info = 3;  // Add this
}