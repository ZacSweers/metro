

package dev.zacsweers.metro.compiler;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link dev.zacsweers.metro.compiler.GenerateTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler-tests/src/test/data/box")
@TestDataPath("$PROJECT_ROOT")
public class BoxTestGenerated extends AbstractBoxTest {
  @Test
  public void testAllFilesPresentInBox() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/box/aggregation")
  @TestDataPath("$PROJECT_ROOT")
  public class Aggregation {
    @Test
    public void testAllFilesPresentInAggregation() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/aggregation"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("ContributesMultibindingInteropAnnotationsAddBindingToSetOrMapWithMapKey.kt")
    public void testContributesMultibindingInteropAnnotationsAddBindingToSetOrMapWithMapKey() {
      runTest("compiler-tests/src/test/data/box/aggregation/ContributesMultibindingInteropAnnotationsAddBindingToSetOrMapWithMapKey.kt");
    }

    @Test
    @TestMetadata("RepeatedContributesBindingAnvilInteropWorksForBoundTypeAndIgnoreQualifier.kt")
    public void testRepeatedContributesBindingAnvilInteropWorksForBoundTypeAndIgnoreQualifier() {
      runTest("compiler-tests/src/test/data/box/aggregation/RepeatedContributesBindingAnvilInteropWorksForBoundTypeAndIgnoreQualifier.kt");
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/box/cycles")
  @TestDataPath("$PROJECT_ROOT")
  public class Cycles {
    @Test
    public void testAllFilesPresentInCycles() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/cycles"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("BindsCycleGraph.kt")
    public void testBindsCycleGraph() {
      runTest("compiler-tests/src/test/data/box/cycles/BindsCycleGraph.kt");
    }

    @Test
    @TestMetadata("CycleGraph.kt")
    public void testCycleGraph() {
      runTest("compiler-tests/src/test/data/box/cycles/CycleGraph.kt");
    }

    @Test
    @TestMetadata("CycleMapGraph.kt")
    public void testCycleMapGraph() {
      runTest("compiler-tests/src/test/data/box/cycles/CycleMapGraph.kt");
    }

    @Test
    @TestMetadata("LongCycle.kt")
    public void testLongCycle() {
      runTest("compiler-tests/src/test/data/box/cycles/LongCycle.kt");
    }

    @Test
    @TestMetadata("SelfCycle.kt")
    public void testSelfCycle() {
      runTest("compiler-tests/src/test/data/box/cycles/SelfCycle.kt");
    }

    @Test
    @TestMetadata("SmokeTest.kt")
    public void testSmokeTest() {
      runTest("compiler-tests/src/test/data/box/cycles/SmokeTest.kt");
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/box/dependencygraph")
  @TestDataPath("$PROJECT_ROOT")
  public class Dependencygraph {
    @Test
    public void testAllFilesPresentInDependencygraph() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/dependencygraph"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("MultibindingGraphWithWithScopedSetDeps.kt")
    public void testMultibindingGraphWithWithScopedSetDeps() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/MultibindingGraphWithWithScopedSetDeps.kt");
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/box/interop")
  @TestDataPath("$PROJECT_ROOT")
  public class Interop {
    @Test
    public void testAllFilesPresentInInterop() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/interop"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Nested
    @TestMetadata("compiler-tests/src/test/data/box/interop/dagger")
    @TestDataPath("$PROJECT_ROOT")
    public class Dagger {
      @Test
      public void testAllFilesPresentInDagger() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/interop/dagger"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("DaggerFactoryClassCanBeLoaded.kt")
      public void testDaggerFactoryClassCanBeLoaded() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/DaggerFactoryClassCanBeLoaded.kt");
      }

      @Test
      @TestMetadata("DaggerFactoryClassCanBeLoadedJakarta.kt")
      public void testDaggerFactoryClassCanBeLoadedJakarta() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/DaggerFactoryClassCanBeLoadedJakarta.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/box/member")
  @TestDataPath("$PROJECT_ROOT")
  public class Member {
    @Test
    public void testAllFilesPresentInMember() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/member"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("FieldInjectFactory.kt")
    public void testFieldInjectFactory() {
      runTest("compiler-tests/src/test/data/box/member/FieldInjectFactory.kt");
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/box/multibindings")
  @TestDataPath("$PROJECT_ROOT")
  public class Multibindings {
    @Test
    public void testAllFilesPresentInMultibindings() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/multibindings"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("MultibindingGraphWithWithScopedMapProviderDeps.kt")
    public void testMultibindingGraphWithWithScopedMapProviderDeps() {
      runTest("compiler-tests/src/test/data/box/multibindings/MultibindingGraphWithWithScopedMapProviderDeps.kt");
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/box/provides")
  @TestDataPath("$PROJECT_ROOT")
  public class Provides {
    @Test
    public void testAllFilesPresentInProvides() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/provides"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("SimpleFunctionProvider.kt")
    public void testSimpleFunctionProvider() {
      runTest("compiler-tests/src/test/data/box/provides/SimpleFunctionProvider.kt");
    }
  }
}
