@Inject
class Bar : Foo {
  val fooProvider: Provider<Foo>
    field = fooProvider
    get

  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  class $$MetroFactory : Factory<Bar> {
    private /* final field */ val fooProvider: Provider<Foo> = fooProvider
    companion object Companion {
      private constructor() /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

      fun create(fooProvider: Provider<Foo>): Factory<Bar> {
        return $$MetroFactory(fooProvider = fooProvider)
      }

      fun newInstance(fooProvider: Provider<Foo>): Bar {
        return Bar(fooProvider = fooProvider)
      }

    }

    constructor(fooProvider: Provider<Foo>) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    override operator fun invoke(): Bar {
      return Companion.newInstance(fooProvider = <this>.#fooProvider)
    }

  }

  constructor(fooProvider: Provider<Foo>) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

@DependencyGraph
interface BindsCycleGraph {
  companion object Companion {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    @GraphFactoryInvokeFunctionMarker
    operator fun invoke(): BindsCycleGraph {
      return $$MetroGraph()
    }

  }

  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  class $$MetroGraph : BindsCycleGraph {
    private /* final field */ val thisGraphInstance: BindsCycleGraph = <this>
    private /* final field */ val bindsCycleGraphProvider: Provider<BindsCycleGraph> = Companion.invoke<BindsCycleGraph>(value = <this>.#thisGraphInstance)
    private /* final field */ val barProvider: Provider<Bar> = DelegateFactory<Bar>()
    constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

      Companion.setDelegate<Bar>(delegateFactory = <this>.#barProvider, delegate = Companion.create(fooProvider = <this>.#barProvider))
    }

    override fun bar(): Bar {
      return <this>.#barProvider.invoke()
    }

    @Binds
    override fun foo(bar: Bar): Foo {
      return error(message = "Never called")
    }

  }

  abstract fun bar(): Bar

  @Binds
  abstract fun foo(bar: Bar): Foo

}

interface Foo {
}
