#!/usr/bin/env bash

set -euo pipefail

# Function to run checks with optional compiler version
run_checks() {
    local compiler_version="$1"
    local version_flag=""

    if [[ -n "$compiler_version" ]]; then
        version_flag="-Pmetro.testCompilerVersion=$compiler_version"
        echo "Running checks with Kotlin version $compiler_version..."
    else
        echo "Running checks..."
    fi

    ./gradlew check -x dokkaGeneratePublicationHtml $version_flag
}

case "$1" in
   "publish")
       version=""
       local=false

       while [[ $# -gt 1 ]]; do
           case "$2" in
               --version)
                   version="$3"
                   shift 2
                   ;;
               --local)
                   local=true
                   shift
                   ;;
               *)
                   echo "Unknown publish argument: $2"
                   exit 1
                   ;;
           esac
       done

       export PUBLISHING=true
       if [[ "$local" = true ]]; then
           if [[ -z "$version" ]]; then
               echo "Version required for local publish"
               exit 1
           fi

           echo "Publishing version $version locally..."
           ./gradlew publishToMavenLocal -x dokkaGeneratePublicationHtml -PVERSION_NAME="${version}" --rerun-tasks
       else
           echo "Publishing version $version..."
           ./gradlew publish -x dokkaGeneratePublicationHtml
       fi
       ;;

   "check")
       all=false
       version=""

       while [[ $# -gt 1 ]]; do
           case "$2" in
               --all)
                   all=true
                   shift
                   ;;
               --version)
                   version="$3"
                   shift 2
                   ;;
               *)
                   echo "Unknown check argument: $2"
                   exit 1
                   ;;
           esac
       done

       if [[ "$all" = true ]]; then
           echo "Running checks against all compiler versions..."

           # Get all available versions using the CI script
           if [[ ! -f "scripts/generate-ci-matrix.sh" ]]; then
               echo "Error: scripts/generate-ci-matrix.sh not found"
               exit 1
           fi

           # Get versions using the script's --versions-only mode
           versions=$(./scripts/generate-ci-matrix.sh --versions-only | tr '\n' ' ')

           echo "Testing against versions: $versions"

           for ver in $versions; do
               echo "=== Testing with Kotlin $ver ==="
               run_checks "$ver" || exit 1
           done
       else
           run_checks "$version"
       fi

       # Run samples last
       ./gradlew -p samples check
       ;;

   "clean")
       echo "Cleaning..."
       ./gradlew clean
       ./gradlew -p samples clean
       ;;

   "format")
       echo "Applying formatting..."
       ./gradlew spotlessApply --no-configuration-cache
       ./gradlew -p samples spotlessApply --no-configuration-cache
       ;;

   "regen")
       echo "Applying formatting and API gen..."
       # Annoyingly, the apiDump and package lock tasks have caching issues
       # https://youtrack.jetbrains.com/issue/KT-69684
       find . -type d -name "api" -exec find {} -name "*.api" -delete \;
       rm -rf kotlin-js-store
       rm -rf samples/kotlin-js-store
       ./gradlew clean --quiet
       ./gradlew spotlessApply apiDump kotlinWasmUpgradePackageLock kotlinUpgradePackageLock --rerun-tasks --no-build-cache --no-configuration-cache --quiet 2>&1 | grep -v "npm warn deprecated"
       ./gradlew -p samples spotlessApply kotlinWasmUpgradePackageLock kotlinUpgradePackageLock --no-configuration-cache --quiet 2>&1 | grep -v "npm warn deprecated"
       ;;

   "gen-compat")
       if [[ $# -lt 2 ]]; then
           echo "Usage: metrow gen-compat <kotlin-version>"
           exit 1
       fi
       ./compiler-compat/generate-compat-module.sh "$2"
       ;;

   *)
       echo "Usage: metrow (publish|check|clean|format|regen|gen-compat)"
       echo ""
       echo "publish options:"
       echo "  --version <version>  Specify version for publishing"
       echo "  --local              Publish locally"
       echo ""
       echo "check options:"
       echo "  --all                Test against all available compiler versions"
       echo "  --version <version>  Test against specific compiler version"
       exit 1
       ;;
esac
